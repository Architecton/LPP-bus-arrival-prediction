import numpy as np
import scipy
import os
import csv
import datetime
import regression_analysis_lib
from regression_analysis_lib import LinearLearner
import sklearn.linear_model
from sklearn.preprocessing import PolynomialFeatures
from data_processing import results_generator

########################
# Author: Jernej Vivod #
########################

"""
This script queries the bus line data folders created by the data_processor script and performs the regression analysis.
The results are written to results.txt file in the project root folder.
"""

print('Compute results using pre-competition data (1) or final competition data (2)? ')
while True:
    type_competition = input()
    if type_competition in {'1', '2'}:
        type_competition = int(type_competition)
        break
    else:
        print('Invalid input. Please try again.')

if type_competition == 1:

    # Prompt user to select regression model.
    print('Choose regression model:')
    print('1 - linear regression (scikit-learn)')
    print('2 - Ridge regression (scikit-learn)')
    print('3 - Lasso regression (scikit-learn)')
    print('4 - Huber regression (scikit-learn)')
    print('5 - Linear regression written by assistants at FRI')
    while True:
        reg_model_sel = input()
        if reg_model_sel in {'1', '2', '3', '4', '5'}:
            reg_model_sel = int(reg_model_sel)
            break
        else:
            print('Invalid input. Please try again.')

    # Load matrices generated by data_processor.
    X = np.load('data_processing/bus-line-data-train/14/predictors_train.npy')
    X_test = np.load('data_processing/bus-line-data-test/14/predictors_test.npy')
    y = np.load('data_processing/bus-line-data-train/14/target_train.npy')
    start_times_test = np.load('data_processing/bus-line-data-test/14/start_times_test.npy')
    # Load feature selection generated by feature_selector.
    feature_sel = np.load('data_processing/bus-line-data-train/14/feature_sel.npy')

    # Regression analysis.
    # Linear regression (scikit-learn library)
    if reg_model_sel == 1:
        # Parse polynomial degree.
        polynomial_degree = int(input('Enter degree of polynomial to use. '))
        poly = PolynomialFeatures(degree=polynomial_degree)
        # Get regression matrix and regression coefficients.
        X_reg, coeff = regression_analysis_lib.regression_analysis(X, y, polynomial_degree, sklearn.linear_model.LinearRegression, False)
        # Get results.
        res = np.sum(np.matmul(poly.fit_transform(X_test), coeff.reshape(len(coeff), 1)), axis=1)
        # Print results to results.txt file.
        results_generator.print_results(start_times_test, res)
    # Ridge regression (scikit-learn library)
    elif reg_model_sel == 2:
        # Parse polynomial degree.
        polynomial_degree = int(input('Enter degree of polynomial to use. '))
        poly = PolynomialFeatures(degree=polynomial_degree)
        # Get regression matrix and regression coefficients.
        X_reg, coeff = regression_analysis_lib.regression_analysis(X, y, polynomial_degree, sklearn.linear_model.RidgeCV, True)
        res = np.sum(np.matmul(poly.fit_transform(X_test), coeff.reshape(len(coeff), 1)), axis=1)
        results_generator.print_results(start_times_test, res)
    # Lasso regression (scikit-learn library)
    elif reg_model_sel == 3:
        # Parse polynomial degree.
        polynomial_degree = int(input('Enter degree of polynomial to use. '))
        poly = PolynomialFeatures(degree=polynomial_degree)
        # Get regression matrix and regression coefficients.
        X_reg, coeff = regression_analysis_lib.regression_analysis(X, y, polynomial_degree, sklearn.linear_model.LassoCV, True)
        res = np.sum(np.matmul(poly.fit_transform(X_test), coeff.reshape(len(coeff), 1)), axis=1)
        results_generator.print_results(start_times_test, res)
    # Huber regression (scikit-learn library)
    elif reg_model_sel == 4:
        # Parse polynomial degree.
        polynomial_degree = int(input('Enter degree of polynomial to use. '))
        poly = PolynomialFeatures(degree=polynomial_degree)
        # Get regression matrix.
        new_X = poly.fit_transform(scipy.sparse.csr_matrix(X))
        new_X = new_X.todense()
        # Run regression analysis and get regression coefficients.
        huber = sklearn.linear_model.HuberRegressor().fit(new_X, y)
        coeff = huber.coef_
        # Get reults.
        res = np.sum(np.matmul(poly.fit_transform(X_test), coeff.reshape(len(coeff), 1)), axis=1)
        # Print results to results.txt file.
        results_generator.print_results(start_times_test, res)
    # Linear regression written by assistants at FRI.
    elif reg_model_sel == 5:
        # Parse polynomial degree.
        polynomial_degree = int(input('Enter degree of polynomial to use. '))
        poly = PolynomialFeatures(degree=polynomial_degree)
        # Create regression matrix.
        new_X = poly.fit_transform(X[:, feature_sel])
        Xsp = scipy.sparse.csr_matrix(new_X)
        # Define a LinearLearner instance.
        lr = LinearLearner(lambda_=1.2)
        # Get prediction function.
        linear = lr(Xsp, y)

        # Get results.
        res = np.empty(len(start_times_test), dtype=float)
        for res_i, row in enumerate(poly.fit_transform(X_test[:, feature_sel])):
            res[res_i] = linear(row)

        # Print results to results.txt file.
        results_generator.print_results(start_times_test, res)
else:
    # Parse polynomial degree.
    polynomial_degree = int(input('Enter degree of polynomial to use. '))
    poly = PolynomialFeatures(degree=polynomial_degree)

    # I. Make list of dictionaries that map line numbers to their linear regression functions (LinearLearner instances).
    # II. Make list of dictionaries that map line numbers to feature matrices.

    lines_features_train = dict()
    learners = dict()
    # Go over folders containing training data for each line.
    for line_fold in os.listdir('./data_processing/bus-line-data-train'): # **
        # Load feature matrix and target variable values matrix.
        X = np.load('./data_processing/bus-line-data-train/' + line_fold + '/predictors_train.npy')
        y = np.load('./data_processing/bus-line-data-train/' + line_fold + '/target_train.npy')
        # Load feature selector.
        feature_sel = np.load('./data_processing/bus-line-data-train/' + line_fold + '/feature_sel.npy')
        # Get regression matrix.
        new_X = poly.fit_transform(X[:, feature_sel])
        # Get linear learner.
        Xsp = scipy.sparse.csr_matrix(new_X)
        lr = LinearLearner(lambda_=1.2)
        linear = lr(Xsp, y)
        # Save linear learner to matrix.
        learners[line_fold] = linear
        # add feature matrix and results matrix to dictionary.
        lines_features_train[line_fold] = (X, y)

    lines_features_test = dict()
    # III. Make list of dictionaries that map line numbers to test feature matrices
    for line_fold in os.listdir('./data_processing/bus-line-data-test'):
        # Load feature matrices for next bus line.
        X_test = np.load('./data_processing/bus-line-data-test/' + line_fold + '/predictors_test.npy')
        # Load feature selection for next bus line.
        feature_sel = np.load('./data_processing/bus-line-data-train/' + line_fold + '/feature_sel.npy')
        # Load starting times for next bus line.
        start_times = np.load('./data_processing/bus-line-data-test/' + line_fold + '/start_times_test.npy')
        # Store feature matrix in dictionary along with the the starting times.
        lines_features_test[line_fold] = (poly.fit_transform(X_test[:, feature_sel]), start_times)

    # IV. Make list of dictionaries that map line numbers to counters.
    line_counters = dict((key, 0) for key in os.listdir('./data_processing/bus-line-data-train'))

    # V. Go over line numbers in master feature matrix and append appropriate prediction to results matrix.

    # Read master lpp test data matrix.
    reader = csv.reader(open('./data_processing/competition_data/test.csv', "r"), delimiter="\t")
    X_master_list = list(reader)
    X_master = np.array(X_master_list)
    # Allocate results matrix.
    res = np.empty(X_master.shape[0] - 1, dtype=int)
    # Go over bus line column in the master matrix. Predict target variable for each row.
    for (k, line_num) in enumerate(X_master[1:, 2]):
        res[k] = learners[line_num](lines_features_test[line_num][0][line_counters[line_num], :])
        line_counters[line_num] += 1

    # VI. Print results to file.

    # Get vector of bus start times in the form of datetime objects.
    start_times_test_master = np.empty((X_master.shape[0] - 1, 1), dtype=object)
    datetime_parse_str = "%Y-%m-%d %H:%M:%S.%f"
    for (k, start_time) in enumerate(X_master[1:, 6]):
        start_times_test_master[k] = datetime.datetime.strptime(start_time, datetime_parse_str)

    # Print predictions/results to file.
    results_generator.print_results(start_times_test_master, res)


print('Done.')
print('Results have been written to the results.txt file in project root folder.')