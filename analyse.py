import numpy as np
import scipy
import os
import regression_analysis_lib
from regression_analysis_lib import LinearLearner
import sklearn.linear_model
from sklearn.preprocessing import PolynomialFeatures
from data_processing import results_generator

# Prompt user to select regression model.
print('Choose regression model:')
print('1 - linear regression (scikit-learn)')
print('2 - Ridge regression (scikit-learn)')
print('3 - Lasso regression (scikit-learn)')
print('4 - Huber regression (scikit-learn)')
print('5 - Linear regression written by assistants at FRI')
while True:
    reg_model_sel = input()
    if reg_model_sel in {'1', '2', '3', '4', '5'}:
        reg_model_sel = int(reg_model_sel)
        break
    else:
        print('Invalid input. Please try again.')

print('Compute results using pre-competition data (1) or final competition data (2)? ')
while True:
    type_competition = input()
    if type_competition in {'1', '2'}:
        type_competition = int(type_competition)
        break
    else:
        print('Invalid input. Please try again.')


if type_competition == 1:
    # Load matrices generated by data_processor.
    X = np.load('data_processing/predictors_train.npy')
    X_test = np.load('data_processing/predictors_test.npy')
    y = np.load('data_processing/target_train.npy')
    start_times_test = np.load('data_processing/start_times_test.npy')
    # Load feature selection generated by feature_selector.
    feature_sel = np.load('feature_sel.npy')

    # Regression analysis.
    # Linear regression (scikit-learn library)
    if reg_model_sel == 1:
        # Parse polynomial degree.
        polynomial_degree = int(input('Enter degree of polynomial to use. '))
        poly = PolynomialFeatures(degree=polynomial_degree)
        # Get regression matrix and regression coefficients.
        X_reg, coeff = regression_analysis_lib.regression_analysis(X, y, polynomial_degree, sklearn.linear_model.LinearRegression, False)
        # Get results.
        res = np.sum(np.matmul(poly.fit_transform(X_test), coeff.reshape(len(coeff), 1)), axis=1)
        # Print results to results.txt file.
        results_generator.print_results(start_times_test, res)
    # Ridge regression (scikit-learn library)
    elif reg_model_sel == 2:
        # Parse polynomial degree.
        polynomial_degree = int(input('Enter degree of polynomial to use. '))
        poly = PolynomialFeatures(degree=polynomial_degree)
        # Get regression matrix and regression coefficients.
        X_reg, coeff = regression_analysis_lib.regression_analysis(X, y, polynomial_degree, sklearn.linear_model.RidgeCV, True)
        res = np.sum(np.matmul(poly.fit_transform(X_test), coeff.reshape(len(coeff), 1)), axis=1)
        results_generator.print_results(start_times_test, res)
    # Lasso regression (scikit-learn library)
    elif reg_model_sel == 3:
        # Parse polynomial degree.
        polynomial_degree = int(input('Enter degree of polynomial to use. '))
        poly = PolynomialFeatures(degree=polynomial_degree)
        # Get regression matrix and regression coefficients.
        X_reg, coeff = regression_analysis_lib.regression_analysis(X, y, polynomial_degree, sklearn.linear_model.LassoCV, True)
        res = np.sum(np.matmul(poly.fit_transform(X_test), coeff.reshape(len(coeff), 1)), axis=1)
        results_generator.print_results(start_times_test, res)
    # Huber regression (scikit-learn library)
    elif reg_model_sel == 4:
        # Parse polynomial degree.
        polynomial_degree = int(input('Enter degree of polynomial to use. '))
        poly = PolynomialFeatures(degree=polynomial_degree)
        # Get regression matrix.
        new_X = poly.fit_transform(scipy.sparse.csr_matrix(X))
        new_X = new_X.todense()
        # Run regression analysis and get regression coefficients.
        huber = sklearn.linear_model.HuberRegressor().fit(new_X, y)
        coeff = huber.coef_
        # Get reults.
        res = np.sum(np.matmul(poly.fit_transform(X_test), coeff.reshape(len(coeff), 1)), axis=1)
        # Print results to results.txt file.
        results_generator.print_results(start_times_test, res)
    # Linear regression written by assistants at FRI.
    elif reg_model_sel == 5:
        # Parse polynomial degree.
        polynomial_degree = int(input('Enter degree of polynomial to use. '))
        poly = PolynomialFeatures(degree=polynomial_degree)
        # Create regression matrix.
        new_X = poly.fit_transform(X[:, feature_sel])
        Xsp = scipy.sparse.csr_matrix(new_X)
        # Define a LinearLearner instance.
        lr = LinearLearner(lambda_=1.2)
        # Get prediction function.
        linear = lr(Xsp, y)

        # Get results.
        res = np.empty(len(start_times_test), dtype=float)
        for res_i, row in enumerate(poly.fit_transform(X_test[:, feature_sel])):
            res[res_i] = linear(row)

        # Print results to results.txt file.
        results_generator.print_results(start_times_test, res)
    else:
        # Parse polynomial degree.
        polynomial_degree = int(input('Enter degree of polynomial to use. '))
        poly = PolynomialFeatures(degree=polynomial_degree)

        # 1. Make list of dictionaries that map line numbers to their linear regression functions (LinearLearner instances).
        # 2. Make list of dictionaries that map line numbers to feature matrices.

        lines_features_train = dict()
        learners = dict()
        # Go over folders containing training data for each line.
        for line_fold in os.listdir('./data_processing/bus-line-data-train'):
            X = np.load('./data_processing/bus-line-data-train/' + line_fold + '/predictors_train.npy')
            y = np.load('./data_processing/bus-line-data-train/' + line_fold + '/target_train.npy')
            feature_sel = np.load('./data_processing/bus-line-data-train/' + 'feature_sel.npy')
            new_X = poly.fit_transform(X[:, feature_sel])
            Xsp = scipy.sparse.csr_matrix(new_X)
            lr = LinearLearner(lambda_=1.2)
            linear = lr(Xsp, y)
            learners[line_fold] = linear
            lines_features_train[line_fold] = (X, y)

        # 2. Make list of dictionaries that map line numbers to test feature matrices
        for line_fold in os.listdir('./data_processing/bus-line-data-test'):
            X = np.load('./data_processing/bus-line-data-test/' + line_fold + '/predictors_test.npy')
            start_times = np.load('./data_processing/bus-line-data-test/' + line_fold + '/start_times_test.npy')
            lines_features_train[line_fold] = (X, start_times)



        # 3. Make list of dictionaries that map line numbers to counters.
        line_counters = dict((key, 0) for key in os.listdir('./data_processing/bus-line-data-train'))





print('Done.')
print('Results have been written to the results.txt file in root folder.')