from sklearn.preprocessing import PolynomialFeatures
from regression_analysis_lib import LinearLearner
import numpy as np
import scipy
import sklearn.metrics
import random
import time
import inspyred

# Load matrices generated by data_processor.
X = np.load('data-processing/predictors_train.npy')
y = np.load('data-processing/target_train.npy')
start_times_train = np.load('data-processing/start_times_train.npy')


## FEATURE SELECTION WITH A GENETIC ALGORITHM ##

# generate_sel: function for generating random chromosomes.
def generate_sel(random, args):
    bits = args.get('num_bits', 8)
    return [random.choice([True, False]) for i in range(bits)]

# fintess function.
@inspyred.ec.evaluators.evaluator
def fitness(sel, args):
    poly = PolynomialFeatures(degree=1)
    # Get sparse matrix representation.
    new_X = poly.fit_transform(X[:, sel])
    Xsp = scipy.sparse.csr_matrix(new_X)
    # Define a LinearLearner instance.
    lr = LinearLearner(lambda_=1.5)
    # Get prediction function.
    linear = lr(Xsp, y)
    # Get results.
    res = np.empty(len(start_times_train), dtype=float)
    for res_i, row in enumerate(new_X):
        res[res_i] = linear(row)

    # Return MAE.
    return -sklearn.metrics.mean_absolute_error(y, res)


rand = random.Random()
rand.seed(int(time.time()))
ga = inspyred.ec.GA(rand)
ga.observer = inspyred.ec.observers.stats_observer
ga.terminator = inspyred.ec.terminators.evaluation_termination

# Get final population. Use parallelized evaluation.
final_pop = ga.evolve(evaluator=inspyred.ec.evaluators.parallel_evaluation_mp,
                      mp_evaluator=fitness,
                      generator=generate_sel,
                      max_evaluations=10000,
                      num_elites=1,
                      pop_size=1000,
                      mp_num_cpus=8,
                      num_bits=X.shape[1])

# Sort individuals by fitness value in descending order.
final_pop.sort(reverse=True)

# Get chromosome of individual with highest fitness and save as a feature
# selection vector to be used with linear regression.
res = final_pop[0].candidate
np.save('feature_sel.npy', res)